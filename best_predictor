#!/bin/bash

# Clean out file with three or more Cantril data
awk -F '\t' '
NR == 1 {
    header = $0; # Store the header
    next;
}
{
    if ($8 != "") { # If the 8th column is not empty
        count[$2]++;  # Increment count for the corresponding code
    }
    data[$2] = (data[$2] ? data[$2] ORS : "") $0; # Store data by code
}
END {
    print header;
    for (code in data) { # Loop through stored data by code:
        if (count[code] >= 3) { # If count for the code is greater than or equal to 3:
            print data[code]; # Print the stored data for the code
        }
    }
}' cleaned.tsv > CantrilOverThree.tsv # Redirect output to CantrilOverThree.tsv

# For lines beyond the first (skipping header), redirect output to tmp.tsv
awk 'BEGIN {FS=OFS="\t"} NR > 1 {print $2, $4, $5, $6, $7, $8}' CantrilOverThree.tsv > tmp.tsv

# Replace empty field with 0
awk 'BEGIN {FS=OFS="\t"} {for (i=1; i<=NF; i++) if ($i=="") $i=0} 1' tmp.tsv > data.tsv

# Clear or create result file
> correlation_results.tsv

# Extract unique values from the first column
categories=$(awk '{print $1}' data.tsv | sort | uniq)

# Iterate through each category
for category in $categories
do
    # Retrieve the data for that category
    data=$(awk -v cat="$category" '$1 == cat' data.tsv)
    
    # Calculate the correlation coefficient
    correlation_2_6=$(echo "$data" | awk '{x+=$2; y+=$6; xy+=$2*$6; xx+=$2*$2; yy+=$6*$6} END{if (NR*xx - x*x != 0 && NR*yy - y*y != 0) print (NR*xy - x*y) / sqrt((NR*xx - x*x) * (NR*yy - y*y)); else print 0}')
    
    correlation_3_6=$(echo "$data" | awk '{x+=$3; y+=$6; xy+=$3*$6; xx+=$3*$3; yy+=$6*$6} END{if (NR*xx - x*x != 0 && NR*yy - y*y != 0) print (NR*xy - x*y) / sqrt((NR*xx - x*x) * (NR*yy - y*y)); else print 0}')
    
    correlation_4_6=$(echo "$data" | awk '{x+=$4; y+=$6; xy+=$4*$6; xx+=$4*$4; yy+=$6*$6} END{if (NR*xx - x*x != 0 && NR*yy - y*y != 0) print (NR*xy - x*y) / sqrt((NR*xx - x*x) * (NR*yy - y*y)); else print 0}')
    
    correlation_5_6=$(echo "$data" | awk '{x+=$5; y+=$6; xy+=$5*$6; xx+=$5*$5; yy+=$6*$6} END{if (NR*xx - x*x != 0 && NR*yy - y*y != 0) print (NR*xy - x*y) / sqrt((NR*xx - x*x) * (NR*yy - y*y)); else print 0}')
    
    # Output the correlation coefficient to the result file
    echo -e "$category\t$correlation_2_6\t$correlation_3_6\t$correlation_4_6\t$correlation_5_6" >> correlation_results.tsv
done

echo ""

 # Calculate and print the mean correlation
awk '{sum1+=$2; sum2+=$3; sum3+=$4; sum4+=$5} 
    END {print "Mean correlation of GDP with Cantril ladder is:", sum1/NR, 
    "\nMean correlation of Population with Cantril ladder is:", sum2/NR, 
    "\nMean correlation of Homicide Rate with Cantril ladder is:", sum3/NR, 
    "\nMean correlation of Life Expectancy with Cantril ladder is:", sum4/NR}' correlation_results.tsv
echo ""

# Calculate and store the mean correlation
awk 'BEGIN {FS="\t"}
    {sum1+=$2; sum2+=$3; sum3+=$4; sum4+=$5} 
    END {
        printf("GDP\t%.6f\n", sum1/NR)
        printf("Population\t%.6f\n", sum2/NR)
        printf("Homicide Rate\t%.6f\n", sum3/NR)
        printf("Life Expectancy\t%.6f\n", sum4/NR)
    }'  correlation_results.tsv | 
    awk 'BEGIN {FS=OFS="\t"} {print $1, $2, ($2<0 ? -1*$2 : $2)}' | # Print the first column as it is, and if the second column is negative, print its absolute value
    sort -t$'\t' -k3,3nr > final_answer.tsv # Sort the output based on the absolute value of the second column in descending order and redirect the output to final_answer.tsv

# Print a header line for the most predictive mean correlation with the Cantril ladder
awk 'NR==1 {print "Most predictive mean correlation with the Cantril ladder is", $1, "(r = ", $2, ")"}' final_answer.tsv
echo ""

rm tmp.tsv
rm data.tsv