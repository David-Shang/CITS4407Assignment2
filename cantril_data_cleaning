#!/bin/bash

# Check if three file names are provided
if [ "$#" -ne 3 ]; then
    echo "Please use three tsv files: file1.tsv file2.tsv file3.tsv"
    exit 1
fi

# 定义标题和文件变量
file1=""
file2=""
file3=""

# 循环检查每个输入文件的第一行
for file in "$@"; do
    header=$(head -n 1 "$file")
    if [[ "$header" == *"Homicide rate per 100,000 population - Both sexes - All ages"* ]]; then
        file1="$file"
    elif [[ "$header" == *"GDP per capita, PPP (constant 2017 international $)"* ]]; then
        file2="$file"
    elif [[ "$header" == *"Life expectancy - Sex: all - Age: at birth - Variant: estimates"* ]]; then
        file3="$file"
    fi
done

# Process each file
for file in "$file1" "$file2" "$file3"; do

    echo ""
    echo ""
    echo "Processing file: $file"
    echo "----------------------------------------"

    # 获取文件的第一行
    first_line=$(head -n 1 "$file")

    # 检查第一行是否包含制表符
    if [[ "$first_line" =~ $'\t' ]]; then
        echo "File $file is already tab-separated."
    else
        # 使用 awk 将文件转换为制表符分隔格式
        awk 'BEGIN { FS="\t"; OFS="\t" } { print }' "$file" > "${file}.tmp"
        mv "${file}.tmp" "$file"
        echo "File $file has been converted to tab-separated format."
    fi


    # 获取标题行的单元格数量
    num_cells=$(head -n 1 "$file" | awk -F'\t' '{print NF}')

    # 检查文件中的每一行是否具有相同的单元格数量
    awk -F'\t' -v num_cells="$num_cells" '{
        if (NF != num_cells) {
            print "Line " NR " has a different number of cells."
        }
    }' "$file"


    column_number=$(awk -F '\t' '{ for (i=1; i<=NF; i++) if ($i == "Continent") {print i} }' "$file")

    result=$(awk -F'\t' '$2 != "" { print }' "$file")

    result=$(awk -F'\t' 'NR == 1 || ($3 >= 2011 && $3 <= 2021)' <<< "$result")

    if [ "$column_number" ]; then
    
        awk -F '\t' -v col="$column_number" 'BEGIN {FS = "\t"; OFS = "\t"} {
            if(NF >= col) {  # Check if the number of fields is greater than or equal to the column number
                $col = ""    # Clear the specified column
            } else {
                print "Error: Not enough fields in line", NR > "/dev/stderr"  # Print an error message if there are not enough fields
                print $0 > "/dev/stderr"
            }
        } 1' <<< "$result" > tmpfile && mv tmpfile "$file"
        echo "Column Continent has been removed from the file."
        echo ""
    else
        echo "$result" > "$file"
        echo "No column removed from the file."
        echo ""
    fi
done


awk 'BEGIN {FS=OFS="\t"}
     FNR == 1 {f++} # Increment the file counter when a new file is processed
     f == 1 {a[$1,$2,$3] = $0; next} # Store the first file in an array
     f == 2 {b[$1,$2,$3] = $0; next} # Store the second file in an array
     f == 3 {
        if (($1,$2,$3) in b) {
            print $0, b[$1,$2,$3], a[$1,$2,$3]
        } else {
            print $0
        }
    }' $file1 $file2 $file3 > output.tsv # Redirect output to output.tsv


# Set field separator (FS) and output field separator (OFS) as tab, and print column headers.
awk 'BEGIN {
    FS="\t";   # Field separator
    OFS="\t";  # Output field separator
    print "Entity", "Code", "Year", "GDP per capita, PPP (constant 2017 international $)", "Population (historical estimates)", "Homicide rate per 100,000 population - Both sexes - All ages", "Life expectancy - Sex: all - Age: at birth - Variant: estimates", "Cantril ladder score"
}
# Print specified columns in the desired order.
NR > 1 {
    print $1, $2, $3, $12, $6, $18, $4, $5
}' output.tsv | tee cleaned.tsv  # Redirect output to cleaned.tsv

# Check the exit status of the awk command
if [ $? -eq 0 ]; then
    # Check if cleaned.tsv file exists and is not empty
    if [ -s cleaned.tsv ]; then
        echo "cleaned.tsv file has been generated and contains data."
        echo ""
        echo ""
    else
        echo "cleaned.tsv file is empty or not generated."
        echo ""
        echo ""
    fi
else
    echo "Command execution failed."
    echo ""
    echo ""
fi

rm output.tsv








