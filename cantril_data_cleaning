#!/bin/bash

# Check if three file names are provided
if [ "$#" -ne 3 ]; then
    echo "Usage: $0 file1.tsv file2.tsv file3.tsv"
    exit 1
fi

file1=$1
file2=$2
file3=$3

# Process each file
for file in "$file1" "$file2" "$file3"; do

    echo "Processing file: $file"
    echo "----------------------------------------"

    # 获取文件的第一行
    first_line=$(head -n 1 "$file")

    # 检查第一行是否包含制表符
    if [[ "$first_line" =~ $'\t' ]]; then
        echo "File $file is already tab-separated."
        echo ""
    else
        # 使用 awk 将文件转换为制表符分隔格式
        awk 'BEGIN { FS="\t"; OFS="\t" } { print }' "$file" > "${file}.tmp"
        mv "${file}.tmp" "$file"
        echo "File $file has been converted to tab-separated format."
        echo ""
    fi


    # 获取标题行的单元格数量
    num_cells=$(head -n 1 "$file" | awk -F'\t' '{print NF}')

    # 检查文件中的每一行是否具有相同的单元格数量
    awk -F'\t' -v num_cells="$num_cells" '{
        if (NF != num_cells) {
            print "Line " NR " has a different number of cells."
        }
    }' "$file"

    
    column_number=$(awk -F '\t' '{ for (i=1; i<=NF; i++) if ($i == "Continent") {print i} }' "$file")

    result=$(awk -F'\t' '$2 != "" { print }' "$file")

    result=$(awk -F'\t' 'NR == 1 || ($3 >= 2011 && $3 <= 2021)' <<< "$result")

    echo "$column_number"


    if [ "$column_number" ]; then

        # awk -F '\t' -v col="$column_number" 'BEGIN {FS = "\t"; OFS = "\t"} {$col = ""; sub("\t\t","\t") } 1' <<< "$result" > "${file%.tsv}_processed.tsv"
        # awk -F '\t' -v col="$column_number" 'BEGIN {FS = "\t"; OFS = "\t"} {$col = ""; sub("\t\t","\t") } 1' "$file" > tmpfile && mv tmpfile "$file"
    
        awk -F '\t' -v col="$column_number" 'BEGIN {FS = "\t"; OFS = "\t"} {
            if(NF >= col) {  # Check if the number of fields is greater than or equal to the column number
                $col = ""    # Clear the specified column
            } else {
                print "Error: Not enough fields in line", NR > "/dev/stderr"  # Print an error message if there are not enough fields
                print $0 > "/dev/stderr"
            }
        } 1' <<< "$result" > tmpfile && mv tmpfile "$file"

        echo "Column Continent has been removed from the file."

    else

        echo "$result" > "$file"
        echo "No column removed from the file."

    fi

    echo ""
done

# 获取每个文件的行数
lines_file1=$(wc -l < "$file1")
lines_file2=$(wc -l < "$file2")
lines_file3=$(wc -l < "$file3")

# 用数组存储文件名和对应的行数
files=("$file1" "$file2" "$file3")
lines=("$lines_file1" "$lines_file2" "$lines_file3")

# 对行数进行降序排列
for ((i=0; i<${#lines[@]}; i++)); do
    for ((j=$i+1; j<${#lines[@]}; j++)); do
        if [[ ${lines[$i]} -lt ${lines[$j]} ]]; then
            temp=${lines[$i]}
            lines[$i]=${lines[$j]}
            lines[$j]=$temp
            temp=${files[$i]}
            files[$i]=${files[$j]}
            files[$j]=$temp
        fi
    done
done

# 将排序后的文件名传给变量
max_file=${files[0]}
second_file=${files[1]}
third_file=${files[2]}

echo "最多行数的文件是：$max_file"
echo "第二多行数的文件是：$second_file"
echo "第三多行数的文件是：$third_file"


awk 'BEGIN {FS=OFS="\t"}
     FNR == 1 {f++} # Increment the file counter when a new file is processed
     f == 1 {a[$1,$2,$3] = $0; next} # Store the first file in an array
     f == 2 {b[$1,$2,$3] = $0; next} # Store the second file in an array
     f == 3 && ($1,$2,$3) in a && ($1,$2,$3) in b {print a[$1,$2,$3], $4, $5, $6, b[$1,$2,$3], $4, $5, $6, $0 # Print the common rows from all three files
     }' $max_file $second_file $third_file > output.tsv # Redirect output to output.tsv

# Set field separator (FS) and output field separator (OFS) as tab, and print column headers.
awk 'BEGIN {
    FS="\t";   # Field separator
    OFS="\t";  # Output field separator
    print "Entity", "Code", "Year", "GDP per capita, PPP (constant 2017 international $)", "Population (historical estimates)", "Homicide rate per 100,000 population - Both sexes - All ages", "Life expectancy - Sex: all - Age: at birth - Variant: estimates", "Cantril ladder score"
}
# Print specified columns in the desired order.
NR > 1 {
    print $1, $2, $3, $15, $6, $8, $4, $5
}' output.tsv > cleaned.tsv  # Redirect output to cleaned.tsv

rm output.tsv








